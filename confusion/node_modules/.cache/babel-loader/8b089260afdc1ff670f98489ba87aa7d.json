{"ast":null,"code":"var _jsxFileName = \"/Users/ps44889/Desktop/react-tutorial/confusion/src/Components/DishDetailComponent.js\";\nimport React, { Component } from 'react';\nimport { Card, CardImg, CardImgOverlay, CardText, CardBody, CardTitle, Breadcrumb, BreadcrumbItem, Button, Modal, ModalHeader, ModalBody, Row, Col, Label } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { Control, LocalForm, Errors } from 'react-redux-form';\nimport { Loading } from './LoadingComponent';\nimport CommentForm from './CommentFormComponent';\nimport { baseURL } from '../shared/baseURL';\n\nfunction RenderDish({\n  dish\n}) {\n  return /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardImg, {\n    width: \"100%\",\n    src: baseURL + dish.image,\n    alt: dish.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CardTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 17\n    }\n  }, dish.name), /*#__PURE__*/React.createElement(CardText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 17\n    }\n  }, dish.description)));\n}\n\nfunction RenderComments({\n  comments,\n  addComment,\n  dishId\n}) {\n  var commentList = comments.map(comment => {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: comment.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }\n    }, comment.comment, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 23\n      }\n    }), \"-- \", comment.author, \", \", new Intl.DateTimeFormat('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: '2-digit'\n    }).format(new Date(Date.parse(comment.date))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 23\n      }\n    }));\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }, \"Comments\"), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"list-unstyled\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, commentList), /*#__PURE__*/React.createElement(CommentForm, {\n    dishId: dishId,\n    addComment: addComment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }));\n}\n\nconst DishDetail = props => {\n  if (props.isLoading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }\n    })));\n  } else if (props.errMess) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }\n    }, props.errMess)));\n  } else if (props.dish) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Breadcrumb, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/menu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 41\n      }\n    }, \"Menu\")), /*#__PURE__*/React.createElement(BreadcrumbItem, {\n      active: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 25\n      }\n    }, props.dish.name)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 25\n      }\n    }, props.dish.name), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 col-md-5 m-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(RenderDish, {\n      dish: props.dish,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 col-md-5 m-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(RenderComments, {\n      comments: props.comments,\n      addComment: props.addComment,\n      dishId: props.dish.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 25\n      }\n    }))));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    });\n  }\n};\n\nexport default DishDetail; // const required = (val) => val && val.length;\n// const maxLength = (len) => (val) => !(val) || (val.length <= len);\n// const minLength = (len) => (val) => val && (val.length >= len);\n// export class CommentForm extends Component {\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             isModalOpen: false\n//         };\n//         this.toggleModal = this.toggleModal.bind(this);\n//         this.handleSubmit = this.handleSubmit.bind(this);\n//     }\n//     toggleModal() {\n//         this.setState({ isModalOpen: !this.state.isModalOpen });\n//     }\n//     handleSubmit(values) {\n//         this.toggleModal();\n//         this.props.addComment(this.props.dishId, values.rating, values.author, values.comment);\n//     }\n//     render() {\n//         return (\n//             <div>\n//                 <Button outline onClick={this.toggleModal}>\n//                     <span className=\"fa fa-pencil fa-lg\"> Submit comment</span>\n//                 </Button>\n//                 <div className=\"row row-content\">\n//                     <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\n//                         <ModalHeader toggle={this.toggleModal}> Submit comment</ModalHeader>\n//                         <ModalBody>\n//                             <div className=\"col-12 col-md-9\">\n//                                 <LocalForm onSubmit={(values) => this.handleSubmit(values)} >\n//                                     <Row className=\"form-group\">\n//                                         <Label htmlFor=\"rating\">Rating</Label>\n//                                         <Col md={10}>\n//                                             <Control.select model=\".rating\" name=\"rating\" className=\"form-control\" >\n//                                                 <option>1</option>\n//                                                 <option>2</option>\n//                                                 <option>3</option>\n//                                                 <option>4</option>\n//                                                 <option>5</option>\n//                                             </Control.select>\n//                                         </Col>\n//                                     </Row>\n//                                     <Row className=\"form-group\">\n//                                         <Label htmlFor=\"author\" md={2}>Your name</Label>\n//                                         <Col md={10}>\n//                                             <Control.text model=\".author\" id=\"author\" name=\"author\" placeholder=\"Author\" className=\"form-control\" validators={{ required, minLength: minLength(3), maxLength: maxLength(15) }} />\n//                                             <Errors className=\"text-danger\" model=\".author\" show=\"touched\" messages={{ required: 'Required', minLength: 'Must be greater than 3 characters', maxLength: 'Must be 15 charaters or less' }} />\n//                                         </Col>\n//                                     </Row>\n//                                     <Row className=\"form-group\">\n//                                         <Label htmlFor=\"feedback\" md={2}>Your feedback</Label>\n//                                         <Col md={10}>\n//                                             <Control.textarea model=\".comment\" id=\"comment\" name=\"comment\" rows=\"6\" className=\"form-control\" validators={{ required }} />\n//                                             <Errors className=\"text-danger\" model=\".comment\" show=\"touched\" messages={{ required: 'Required' }} />\n//                                         </Col>\n//                                     </Row>\n//                                     <Button type=\"submit\" value=\"submit\" color=\"primary\">Submit</Button>\n//                                 </LocalForm>\n//                             </div>\n//                         </ModalBody>\n//                     </Modal>\n//                 </div>\n//             </div>\n//         );\n//     }\n// }","map":{"version":3,"sources":["/Users/ps44889/Desktop/react-tutorial/confusion/src/Components/DishDetailComponent.js"],"names":["React","Component","Card","CardImg","CardImgOverlay","CardText","CardBody","CardTitle","Breadcrumb","BreadcrumbItem","Button","Modal","ModalHeader","ModalBody","Row","Col","Label","Link","Control","LocalForm","Errors","Loading","CommentForm","baseURL","RenderDish","dish","image","name","description","RenderComments","comments","addComment","dishId","commentList","map","comment","id","author","Intl","DateTimeFormat","year","month","day","format","Date","parse","date","DishDetail","props","isLoading","errMess"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Card, CardImg, CardImgOverlay, CardText, CardBody, CardTitle, Breadcrumb, BreadcrumbItem, Button, Modal, ModalHeader, ModalBody, Row, Col, Label } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { Control, LocalForm, Errors } from 'react-redux-form';\nimport { Loading } from './LoadingComponent';\nimport CommentForm  from './CommentFormComponent';\nimport {baseURL} from '../shared/baseURL';\nfunction RenderDish({ dish }) {\n    return (\n        <Card>\n            <CardImg width=\"100%\" src={baseURL + dish.image} alt={dish.name} />\n            <CardBody>\n                <CardTitle>{dish.name}</CardTitle>\n                <CardText>{dish.description}</CardText>\n            </CardBody>\n        </Card>\n    );\n}\n\nfunction RenderComments({ comments, addComment, dishId }) {\n    var commentList = comments.map(comment => {\n        return (\n            <li key={comment.id} >\n                {comment.comment}\n                <br /><br />\n                -- {comment.author}, {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit' }).format(new Date(Date.parse(comment.date)))}\n                <br /><br />\n            </li>\n        );\n    });\n\n    return (\n        <div>\n            <h4>Comments</h4>\n            <ul className=\"list-unstyled\">\n                {commentList}\n            </ul>\n            <CommentForm dishId={dishId} addComment={addComment} />\n        </div>\n    );\n}\n\nconst DishDetail = props => {\n    if (props.isLoading) {\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <Loading />\n                </div>\n            </div>\n        );\n    }\n    else if (props.errMess) {\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <h4>{props.errMess}</h4>\n                </div>\n            </div>\n        );\n    }\n    else if (props.dish) {\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <Breadcrumb>\n                        <BreadcrumbItem><Link to='/menu'>Menu</Link></BreadcrumbItem>\n                        <BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>\n                    </Breadcrumb>\n                    <div className=\"col-12\">\n                        <h3>{props.dish.name}</h3>\n                        <hr />\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-12 col-md-5 m-1\">\n                        <RenderDish dish={props.dish} />\n                    </div>\n                    <div className=\"col-12 col-md-5 m-1\">\n                        <RenderComments comments={props.comments} addComment={props.addComment} dishId={props.dish.id} />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n    else {\n        return (\n            <div></div>\n        );\n    }\n}\n\nexport default DishDetail;\n\n\n\n// const required = (val) => val && val.length;\n// const maxLength = (len) => (val) => !(val) || (val.length <= len);\n// const minLength = (len) => (val) => val && (val.length >= len);\n\n// export class CommentForm extends Component {\n//     constructor(props) {\n//         super(props)\n\n//         this.state = {\n//             isModalOpen: false\n//         };\n\n//         this.toggleModal = this.toggleModal.bind(this);\n//         this.handleSubmit = this.handleSubmit.bind(this);\n//     }\n\n//     toggleModal() {\n//         this.setState({ isModalOpen: !this.state.isModalOpen });\n//     }\n\n//     handleSubmit(values) {\n//         this.toggleModal();\n\n//         this.props.addComment(this.props.dishId, values.rating, values.author, values.comment);\n//     }\n\n//     render() {\n//         return (\n//             <div>\n//                 <Button outline onClick={this.toggleModal}>\n//                     <span className=\"fa fa-pencil fa-lg\"> Submit comment</span>\n//                 </Button>\n\n//                 <div className=\"row row-content\">\n//                     <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\n//                         <ModalHeader toggle={this.toggleModal}> Submit comment</ModalHeader>\n//                         <ModalBody>\n//                             <div className=\"col-12 col-md-9\">\n//                                 <LocalForm onSubmit={(values) => this.handleSubmit(values)} >\n//                                     <Row className=\"form-group\">\n//                                         <Label htmlFor=\"rating\">Rating</Label>\n//                                         <Col md={10}>\n//                                             <Control.select model=\".rating\" name=\"rating\" className=\"form-control\" >\n//                                                 <option>1</option>\n//                                                 <option>2</option>\n//                                                 <option>3</option>\n//                                                 <option>4</option>\n//                                                 <option>5</option>\n//                                             </Control.select>\n//                                         </Col>\n//                                     </Row>\n\n//                                     <Row className=\"form-group\">\n//                                         <Label htmlFor=\"author\" md={2}>Your name</Label>\n//                                         <Col md={10}>\n//                                             <Control.text model=\".author\" id=\"author\" name=\"author\" placeholder=\"Author\" className=\"form-control\" validators={{ required, minLength: minLength(3), maxLength: maxLength(15) }} />\n//                                             <Errors className=\"text-danger\" model=\".author\" show=\"touched\" messages={{ required: 'Required', minLength: 'Must be greater than 3 characters', maxLength: 'Must be 15 charaters or less' }} />\n//                                         </Col>\n//                                     </Row>\n\n//                                     <Row className=\"form-group\">\n//                                         <Label htmlFor=\"feedback\" md={2}>Your feedback</Label>\n//                                         <Col md={10}>\n//                                             <Control.textarea model=\".comment\" id=\"comment\" name=\"comment\" rows=\"6\" className=\"form-control\" validators={{ required }} />\n//                                             <Errors className=\"text-danger\" model=\".comment\" show=\"touched\" messages={{ required: 'Required' }} />\n//                                         </Col>\n//                                     </Row>\n\n//                                     <Button type=\"submit\" value=\"submit\" color=\"primary\">Submit</Button>\n//                                 </LocalForm>\n//                             </div>\n//                         </ModalBody>\n//                     </Modal>\n//                 </div>\n//             </div>\n//         );\n//     }\n// }"]},"metadata":{},"sourceType":"module"}